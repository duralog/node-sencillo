// Generated by CoffeeScript 1.3.3
(function() {
  var Commit, Gitteh, NativeCommit, NativeRepository, Repository, bindings;

  bindings = require("../build/Release/gitteh");

  NativeRepository = bindings.Repository;

  NativeCommit = bindings.Commit;

  Commit = function(nativeCommit) {
    if (!nativeCommit instanceof NativeCommit) {
      throw new Error("Use repository.getCommit/createCommit");
    }
  };

  Repository = function(nativeRepo) {
    if (!nativeRepo instanceof NativeRepository) {
      throw new Error("Don't use this directly, see Gitteh.openRepository/Gitteh.initRepository");
    }
    this.exists = function(oid, cb) {
      return nativeRepo.exists(oid, cb);
    };
    this.getCommit = function(oid, cb) {
      var res, wrappedCb;
      oid = oid.toString();
      if (!oid) {
        throw new TypeError("Invalid object id.");
      }
      if (cb != null) {
        wrappedCb = function(err, commit) {
          if (err != null) {
            return cb(err);
          }
          return cb(null, new Commit(commit));
        };
      }
      res = nativeRepo.getCommit(oid, wrappedCb);
      if (res instanceof NativeCommit) {
        return new Commit(res);
      }
    };
    Object.defineProperty(this, "path", {
      value: nativeRepo.path,
      writable: false,
      enumerable: true
    });
    Object.defineProperty(this, "bare", {
      value: nativeRepo.bare,
      writable: false,
      enumerable: true
    });
    return this;
  };

  Gitteh = {
    openRepository: function(path, cb) {
      var res, wrappedCb;
      if (cb != null) {
        wrappedCb = function(err, repo) {
          if (err) {
            return cb(err);
          }
          return cb(null, new Repository(repo));
        };
      }
      res = bindings.openRepository(path, wrappedCb);
      if (res instanceof NativeRepository) {
        return new Repository(res);
      }
    },
    initRepository: function(path, bare, cb) {
      var res, wrappedCb;
      if (cb != null) {
        wrappedCb = function(err, repo) {
          if (err) {
            return cb(err);
          }
          return cb(null, new Repository(repo));
        };
      }
      res = bindings.initRepository(path, bare, wrappedCb);
      if (res instanceof NativeRepository) {
        return new Repository(res);
      }
    }
  };

  module.exports = Gitteh;

  module.exports.Repository = Repository;

}).call(this);
