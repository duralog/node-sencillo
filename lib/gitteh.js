// Generated by CoffeeScript 1.3.1
(function() {
  var Commit, Gitteh, Repository, wrap;

  Gitteh = require("../build/Release/gitteh");

  Repository = Gitteh.Repository, Commit = Gitteh.Commit;

  /*
  Commit = (nativeCommit) ->
  	if not nativeCommit instanceof NativeCommit
  		throw new Error("Use repository.getCommit/createCommit")
  
  Repository = (nativeRepo) ->
  	if not nativeRepo instanceof NativeRepository
  		throw new Error("Don't use this directly, see Gitteh.openRepository/Gitteh.initRepository")
  
  	@exists = (oid, cb) ->
  		return nativeRepo.exists oid, cb
  
  	@getCommit = (oid, cb) ->
  		oid = oid.toString()
  		throw new TypeError "Invalid object id." if not oid 
  		if cb? then wrappedCb = (err, commit) ->
  			return cb err if err?
  			return cb null, new Commit commit
  		res = nativeRepo.getCommit oid, wrappedCb
  		return new Commit res if res instanceof NativeCommit
  
  	Object.defineProperty @, "path",
  		value: nativeRepo.path
  		writable: false
  		enumerable: true
  
  	Object.defineProperty @, "bare",
  		value: nativeRepo.bare
  		writable: false
  		enumerable: true
  
  	return @
  
  Gitteh = 
  	openRepository: (path, cb) ->
  		if cb? then wrappedCb = (err, repo) ->
  			return cb err if err
  			return cb null, new Repository repo
  		res = bindings.openRepository path, wrappedCb
  		return new Repository res if res instanceof NativeRepository
  	initRepository: (path, bare, cb) ->
  		if cb? then wrappedCb = (err, repo) ->
  			return cb err if err
  			return cb null, new Repository repo
  		res = bindings.initRepository path, bare, wrappedCb
  		return new Repository res if res instanceof NativeRepository
  
  module.exports = Gitteh
  module.exports.Repository = Repository
  */


  wrap = function(clazz, fn, prototype, newFn) {
    var orig;
    orig = prototype ? clazz.prototype[fn] : clazz[fn];
    return clazz[fn] = function() {
      var shadowed;
      shadowed = prototype ? orig.bind(this) : orig;
      return newFn.apply(this, [shadowed].concat(Array.prototype.slice.call(arguments)));
    };
  };

  module.exports = Gitteh;

  wrap(Gitteh, "openRepository", false, function(shadowed, path, cb) {
    return shadowed(path, cb);
  });

  wrap(Gitteh, "initRepository", false, function(shadowed, path, bare, cb) {
    if (typeof bare === "function") {
      cb = bare;
      bare = false;
    }
    return shadowed(path, bare, cb);
  });

  wrap(Repository, "exists", true, function(shadowed, oid, cb) {
    return shadowed(oid, cb);
  });

}).call(this);
